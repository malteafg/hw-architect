// struct Instance {
//     position: cgmath::Vector3<f32>,
//     rotation: cgmath::Quaternion<f32>,
// }
//
// impl Instance {
//     fn to_raw(&self) -> InstanceRaw {
//         let model =
//             cgmath::Matrix4::from_translation(self.position) * cgmath::Matrix4::from(self.rotation);
//         InstanceRaw {
//             model: model.into(),
//             normal: cgmath::Matrix3::from(self.rotation).into(),
//         }
//     }
// }
//
// #[repr(C)]
// #[derive(Debug, Copy, Clone, bytemuck::Pod, bytemuck::Zeroable)]
// #[allow(dead_code)]
// struct InstanceRaw {
//     model: [[f32; 4]; 4],
//     normal: [[f32; 3]; 3],
// }
//
// impl Vertex for InstanceRaw {
//     fn desc<'a>() -> wgpu::VertexBufferLayout<'a> {
//         use std::mem;
//         wgpu::VertexBufferLayout {
//             array_stride: mem::size_of::<InstanceRaw>() as wgpu::BufferAddress,
//             // We need to switch from using a step mode of Vertex to Instance
//             // This means that our shaders will only change to use the next
//             // instance when the shader starts processing a new instance
//             step_mode: wgpu::VertexStepMode::Instance,
//             attributes: &[
//                 wgpu::VertexAttribute {
//                     offset: 0,
//                     // While our vertex shader only uses locations 0, and 1 now, in later tutorials we'll
//                     // be using 2, 3, and 4, for Vertex. We'll start at slot 5 not conflict with them later
//                     shader_location: 5,
//                     format: wgpu::VertexFormat::Float32x4,
//                 },
//                 // A mat4 takes up 4 vertex slots as it is technically 4 vec4s. We need to define a slot
//                 // for each vec4. We don't have to do this in code though.
//                 wgpu::VertexAttribute {
//                     offset: mem::size_of::<[f32; 4]>() as wgpu::BufferAddress,
//                     shader_location: 6,
//                     format: wgpu::VertexFormat::Float32x4,
//                 },
//                 wgpu::VertexAttribute {
//                     offset: mem::size_of::<[f32; 8]>() as wgpu::BufferAddress,
//                     shader_location: 7,
//                     format: wgpu::VertexFormat::Float32x4,
//                 },
//                 wgpu::VertexAttribute {
//                     offset: mem::size_of::<[f32; 12]>() as wgpu::BufferAddress,
//                     shader_location: 8,
//                     format: wgpu::VertexFormat::Float32x4,
//                 },
//                 wgpu::VertexAttribute {
//                     offset: mem::size_of::<[f32; 16]>() as wgpu::BufferAddress,
//                     shader_location: 9,
//                     format: wgpu::VertexFormat::Float32x3,
//                 },
//                 wgpu::VertexAttribute {
//                     offset: mem::size_of::<[f32; 19]>() as wgpu::BufferAddress,
//                     shader_location: 10,
//                     format: wgpu::VertexFormat::Float32x3,
//                 },
//                 wgpu::VertexAttribute {
//                     offset: mem::size_of::<[f32; 22]>() as wgpu::BufferAddress,
//                     shader_location: 11,
//                     format: wgpu::VertexFormat::Float32x3,
//                 },
//             ],
//         }
//     }
// }
//
// const NUM_INSTANCES_PER_ROW: u32 = 1;

pub struct GfxState {
    // render_pipeline: wgpu::RenderPipeline,
    // instances: Vec<Instance>,
    // instance_buffer: buffer::DBuffer,
}

impl GfxState {
    pub async fn new(window: &Window) -> Self {
        // const SPACE_BETWEEN: f32 = 3.0;
        // let instances = (0..NUM_INSTANCES_PER_ROW)
        //     .flat_map(|z| {
        //         (0..NUM_INSTANCES_PER_ROW).map(move |x| {
        //             let x = SPACE_BETWEEN * (x as f32 - NUM_INSTANCES_PER_ROW as f32 / 2.0);
        //             let z = SPACE_BETWEEN * (z as f32 - NUM_INSTANCES_PER_ROW as f32 / 2.0);
        //
        //             let position = cgmath::Vector3 { x, y: 0.0, z };
        //
        //             let rotation = if position.is_zero() {
        //                 cgmath::Quaternion::from_axis_angle(
        //                     cgmath::Vector3::unit_z(),
        //                     cgmath::Deg(0.0),
        //                 )
        //             } else {
        //                 cgmath::Quaternion::from_axis_angle(position.normalize(), cgmath::Deg(45.0))
        //             };
        //
        //             Instance { position, rotation }
        //         })
        //     })
        //     .collect::<Vec<_>>();
        //
        // let instance_data = instances.iter().map(Instance::to_raw).collect::<Vec<_>>();
        // let mut instance_buffer =
        //     buffer::DBuffer::new("Instance Buffer", wgpu::BufferUsages::VERTEX, &device);
        // instance_buffer.write(&queue, &device, &bytemuck::cast_slice(&instance_data));

        // let render_pipeline = {
        //     let layout = device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
        //         label: Some("Render Pipeline Layout"),
        //         bind_group_layouts: &[
        //             &texture_bind_group_layout,
        //             &camera_bind_group_layout,
        //             &light_bind_group_layout,
        //         ],
        //         push_constant_ranges: &[],
        //     });
        //
        //     let shader = wgpu::ShaderModuleDescriptor {
        //         label: Some("Normal Shader"),
        //         source: wgpu::ShaderSource::Wgsl(include_str!("shader.wgsl").into()),
        //     };
        //     create_render_pipeline(
        //         &device,
        //         &layout,
        //         config.format,
        //         Some(texture::Texture::DEPTH_FORMAT),
        //         &[model::ModelVertex::desc(), InstanceRaw::desc()],
        //         shader,
        //         "Render Pipeline",
        //     )
        // };

    pub fn render(&mut self) -> Result<(), wgpu::SurfaceError> {
            // render_pass.set_vertex_buffer(1, self.instance_buffer.slice(..));
            // render_pass.set_pipeline(&self.render_pipeline);

            // use model::DrawModel;
            // let mesh = &self.obj_model.meshes[0];
            // let material = &self.obj_model.materials[mesh.material];
            // render_pass.draw_mesh_instanced(
            //     mesh,
            //     material,
            //     0..self.instances.len() as u32,
            //     &self.camera_bind_group,
            // );

            // render instances
            // match self.instance_buffer.get_buffer_slice() {
            //     Some(buffer_slice) => {
            //         render_pass.set_vertex_buffer(1, buffer_slice);
            //         render_pass.set_pipeline(&self.render_pipeline);
            //         render_pass.draw_model_instanced(
            //             &self.obj_model,
            //             0..self.instances.len() as u32,
            //             &self.camera_bind_group,
            //             &self.light_bind_group,
            //         );
            //         //render_pass.draw_indexed(0..self.num_indices, 0, 0..self.instances.len() as _);
            //     }
            //     None => {}
            // }
    // pub fn add_instance(&mut self, position: cgmath::Vector3<f32>) {
    //     self.instances.push(Instance {
    //         position,
    //         rotation: math_utils::quart(
    //             Rad(std::f32::consts::PI / 4.0),
    //             Vector3::new(0.0, 1.0, 0.0),
    //         ),
    //     });
    //     let instance_data = self
    //         .instances
    //         .iter()
    //         .map(Instance::to_raw)
    //         .collect::<Vec<_>>();
    //     self.instance_buffer.write(
    //         &self.queue,
    //         &self.device,
    //         &bytemuck::cast_slice(&instance_data),
    //     );
    // }
    //
    // pub fn remove_instance(&mut self) {
    //     if self.instances.len() != 0 {
    //         self.instances.remove(0);
    //         let instance_data = self
    //             .instances
    //             .iter()
    //             .map(Instance::to_raw)
    //             .collect::<Vec<_>>();
    //         self.instance_buffer.write(
    //             &self.queue,
    //             &self.device,
    //             &bytemuck::cast_slice(&instance_data),
    //         );
    //     }
    // }
